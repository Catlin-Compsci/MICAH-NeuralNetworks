package core.data;

import utils.ArrayUtils;

import java.util.Arrays;

public class ArrayShape implements DataShape {
    protected int[] dims;

    @Override
    public String toString() {
        if(dims.length==1) return Arrays.toString(dims);
        else return Arrays.toString(ArrayUtils.subsection(dims,0,numDims()-1));
    }

    public ArrayShape(int... dimensions) {
        if(dimensions[dimensions.length-1]!=1) {
            dimensions = ArrayUtils.concatAll(dimensions,new int[]{1});
        }
        this.dims = dimensions;
    }

    protected ArrayShape() {
        //Filler, just create new
    }

    public int[] getDims() {
        return dims;
    }
    public int numDims() {
//        boolean one = false;
//        int count = 0;
//        for (int dim : getDims()) {
//            if(!one) count++;
//            if(dim==1) one = true;
//        }
//        return count;
        return getDims().length;
    }

    public boolean canReshapeTo(ArrayShape otherShape) {
        return otherShape.numPoints() == numPoints();
    }

    public int numPoints() {
        int nodes = 1;
        for (int d : dims) {
            nodes*=d;
        }
        return nodes;
    }

    public boolean isPoint() {
        return numDims()==1 && getDims()[0]==1;
    }

    public ArrayShape chip() {
        if(numDims()==1 || numDims()==0) {
            return new ArrayShape(1);
        } else {
            int[] newDims = new int[numDims()-1];
            for (int i = 1; i < numDims(); i++) {
                newDims[i-1] = dims[i];
            }
            return new ArrayShape(newDims);
        }
    }

    // (Autogenerated by Intellij)
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        ArrayShape arrayShape = (ArrayShape) o;
        if(arrayShape.numPoints() == 1 && numPoints() == 1) return true;
        return Arrays.equals(dims, arrayShape.dims);
    }

    @Override
    public int hashCode() {
        return Arrays.hashCode(dims);
    }
}
